// Dateiname: Login.c
/*
 * Ihr Programm soll eine einfache Benutzerverwaltung durchführen:
Bis zu 120 Benutzernamen und eindeutig zugeordnete Passworte
sollen zwecks Registrierung nacheinander über die Konsole
eingelesen und gespeichert werden.
Benutzernamen müssen:
6 bis 9 Zeichen lang sein,
einen Großbuchstaben als erstes Zeichen enthalten,
ab dem zweiten Zeichen nur aus Kleinbuchstaben oder
dezimalen Ziffern bestehen.
Passworte müssen:
8 bis 14 Zeichen lang sein,
mindesten einen Großbuchstaben, einen Kleinbuchstaben
und eine dezimale Ziffer enthalten,
zum Anlegen zweimal identisch eingegeben werden.
Bei der Benutzeranmeldung müssen:
der Benutzername und das Passwort eingegeben werden,
eine Mitteilung über den erfolgreichen Anmeldeversuch
ausgegeben werden, falls die Benutzeranmeldung korrekt
war,
eine Mitteilung über den erfolglosen
Anmeldeversuch ausgegeben werden, falls die
Benutzeranmeldung fehlerhaft war.
Es sind maximal drei erfolglose Anmeldeversuche erlaubt. Bei
Überschreiten dieser Maximalzahl soll der Nutzer für einen
erneuten Anmeldeversuch für die Dauer von zwei Minuten gesperrt
werden.
Zur Passwortänderung muss zunächst das gespeicherte Passwort
korrekt und dann das neue Passwort mit korrekter Wiederholung
eingegeben werden.
Bei jeder Passworteingabe soll jedes zum Passwort gehörende
Zeichen während der Eingabe im Klartext auf dem Bildschirm
2 von 4
30.12.2018 13:07ILIAS TH Köln - Aufgabenvergabe POOL 2
https://ilias.th-koeln.de/ilias.php?ref_id=11545...
dargestellt und beim Abschluss der Eingabe durch einen Stern (*)
überschrieben werden.
Bei fehlerhaften Eingaben sollen aussagekräftige Fehlermeldungen
auf dem Bildschirm ausgegeben werden.
 */
// Eingabeparameter mit zulässigem Wertebereich: Kennwort 8-14 zeichen, passwort 6-9 zeichen
// Ausgaben mit zulässigem Wertebereich: -
// Autor: Jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "console.h"
#include <time.h>

// Funktionsname: Sperre
// Die funktion stoppt die zeit
// Eingabeparameter mit zulässigem Wertebereich: zeit in sekunden
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: Jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019
void Sperre(int Zeit){
	//start und stop variablen
	time_t Start, Stop;
	//zeitdifferenz
	double Diff;
	//stoppe die zeit
	Start=time(NULL);
	//ohne das printf funktioniert die Zeitfunktion nicht
	printf("\n");
	//solange zeitdifferenz nicht erreicht pausiere
	while((Diff=difftime(Stop=time(NULL),Start)) != Zeit);
	//lösche bildschirminhalt
	CLS;
}

// Funktionsname: KennwortEingeben
// Die Funktion liest das kennwort über die Tastatur ein und überschreibt die eingabe mit sternchen
// Eingabeparameter mit zulässigem Wertebereich: array platz für min 14 zeichen
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: Jan Taschbach
// Version: 1.2
// Datum der letzten Änderung: 24.1.2019
void KennwortEingeben(char Passwort[15]){
	//zaehlvariable
	int i,j,k;


	//laenge des kennworts
	int Len=0;
	//brauche die länge zweimal
	int TempLen;
	//"loesche" bildschirminhalt
	CLS;
	//eingabeaufforderung
	printf("Bitte waehlen sie ihr Passwort ein\nKennwort:");
	scanf("%s",Passwort);
	//laenge des kennworts berechnen
	Len=strlen(Passwort);
	TempLen=Len;

	//gebe so viele sternchen aus wie die kennworteingabe lang war
	//gebe das kennwort nochmal aus und ueberschreibe alles mit asteriksen
	for(j=0;j<=Len;j++){
		for(i=0;i<TempLen;i++){
			printf("%c",Passwort[i]);
		}
		for(k=0;k<j;k++){
			printf("*");
		}
		Sperre(1);
		TempLen--;
	}

}


// Funktionsname: Registrieren
// Registrierung von neuen benutzern mit pruefung ob der user bereits existiert außerdem werden richtlinien zur kennwort und namesvergabe festgelegt
// Eingabeparameter mit zulässigem Wertebereich: Benutzernamen müssen:
//6 bis 9 Zeichen lang sein,
//einen Großbuchstaben als erstes Zeichen enthalten,
//ab dem zweiten Zeichen nur aus Kleinbuchstaben oder
//dezimalen Ziffern bestehen.
//die funktion bekommt die datenbank übergeben
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: Jan Taschbach
// Version: 1.2
// Datum der letzten Änderung: 24.1.2019

void Registrieren(char Datenbank[][15]){
	//passwort policy
	int Gros=0;
	int Klein=0;
	int Ziffer=0;
	int Pruef=0;
	//platz für altes Kennwort
	char EingabeAlt[15]={'0'};
	//platz für neues Kennwort
	char EingabeNeu[15]={'0'};
	//indizierung in der db
	int Zeile=0;
	//laufvariable
	int i;
	//länge der Zeile
	int Len=0;
	//eingabe
	char Eingabe[10];
	//temp zum überprüfen auf korrekte Eingabe
	int CtoI;
	//schau nach dem nächsten freien Platz in der Datenbank
	for(Zeile=0;Zeile<120;i=Zeile=Zeile+2){
		Len=strlen(Datenbank[Zeile]);
		if(Len<6)break;
	}

	//lese namen ein
	do{
		printf("Bitte geben sie ihren Benutzernamen ein\n");
		scanf("%s",Eingabe);
		Len=strlen(Eingabe);
		if((Len<6)||(Len>9))printf("Ungueltige Eingabe\n");
	}while((Len<6)||(Len>9));




	//erstes zeichen muss ein großbuchstabe sein
	CtoI=(int)Eingabe[0];
	if(CtoI<64||CtoI>90){
		for(i=1;i<Len-1;i++){
			//ab dem zweiten zeichen klein oder zahl
			CtoI=(int)Eingabe[i];
			if(((CtoI>47)&&(CtoI<58))||((CtoI>96)&&(CtoI<123))){

			}else{
				//eingabe inkorrekt--> neu eingeben
				printf("Eingabe inkorrekt\n");
				Registrieren(Datenbank);
				break;
			}
		}
	}
	//eingabe korrekt schreibe Namen in db
	strcpy(Datenbank[Zeile],Eingabe);

	//lese Kennwort ein
	do{
		printf("Bitte geben sie ihr neues Passwort ein\n:");
		KennwortEingeben(EingabeAlt);
		Len=strlen(EingabeAlt);

		//Pruefe auf korrekte eingabe
		for(i=0;i<Len;i++){
			Pruef=(int)EingabeAlt[i];

			if(Pruef>64&&Pruef<91)Gros=1;
			if (Pruef>96&&Pruef<123)Klein=1;
			if(Pruef>47&&Pruef<58)Ziffer=1;
		}


		if(Len<8||Len>14||Gros==0||Klein==0||Ziffer==0)printf("ungueltige Eingabe, beachten sie die Richtlinien zur Kennwortvergabe\n\n");

	}while((Len<8)||(Len>14)||Gros==0||Klein==0||Ziffer==0);

	//wiederhole kennwort eingabe solange bis sie übereinstimmen
	do{
		printf("Bitte geben sie ihr neues Kennwort erneut ein\n:");
		KennwortEingeben(EingabeNeu);
		//pruefe ob das alte mit dem neuen kennwort übereinstimmt
		if(strcmp(EingabeNeu,EingabeAlt)!=0)printf("Die Kennwörter stimmen nicht überein.\n");
	}while(strcmp(EingabeNeu,EingabeAlt)!=0);


	//ersetze altes mit neuem kennwort
	strcpy(Datenbank[Zeile+1],EingabeNeu);


	printf("Registrierung erfolgreich, aktualisiere Datenbank...");

	//aktualisiere Datenbank
	ChangeDb(Datenbank);

}



// Funktionsname: Login
// Login des Benutzers mit überprüfung ob der nutzer existiert und auslösen einer sperre von 2 min bei 3 malig falsch eingegebenem passwort
// Eingabeparameter mit zulässigem Wertebereich: Name und kennwort die funktion bekommt die datenbank übergeben
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: jan Taschbach
// Version: 1.2
// Datum der letzten Änderung: 24.1.2019
void Login(char Datenbank[][15]){
	//speicherplatz für die namens eingabe
	char Eingabe[15]={'0'};
	//zähle die anzahl der falschen eingaben
	int Inkorrekt=0;
	//auswahl ob passwort geändert werden soll oder nicht
	int Choose=0;
	//zählvariable
	int i;
	//groeße des arrays
	int GroesseDb=0;
	//anzahl user
	int AnzUser;
	//user vorhanden?
	int UserVorhanden=0;
	//ermittle größe des arrays
	for(i=0;i<240;i++){
		if(Datenbank[i][0]!='0'){
			GroesseDb++;
		}else{
			break;
		}
	}
	AnzUser=GroesseDb/2;


	//eingabeaufforderung /einlesen des namens
	printf("Bitte geben sie ihren Benutzernamen ein\n:");
	scanf("%s",Eingabe);

	//suche nach namen in Db
	for(i=0;i<AnzUser;i=i+2){
		if(strcmp(Eingabe,Datenbank[i])){
			UserVorhanden=1;
			break;
		}else{
			i++;
		}}

	if(UserVorhanden==1){
		//prüfe passwort
		do{
			//eingabeaufforderung passwort
			KennwortEingeben(Eingabe);
			//pruefe passwort
			if(strcmp(Eingabe,Datenbank[i-2])==0){
				printf("Passwort korrekt");
				break;
			}else{
				printf("Das war leider falsch\n");
				Inkorrekt++;
			}
		}while(Inkorrekt<3);

		//sperre
		if(Inkorrekt==3){
			printf("sie wurden für 2 Minuten gesperrt\n");
			Sperre(120);
		}


	}else{
		printf("Der User existiert nicht");

	}
	//abfrage ob kennwort geändert werden soll
	printf("moechten sie ihr kennwort ändern?\nJa=1\nNein=0\n");
	scanf("%i",&Choose);
	if(Choose==1)ChangePw(Datenbank,i-2);

}

// Funktionsname: menue
// ausgabe eines menues zur wahl zwischen login und registrierung
// Eingabeparameter mit zulässigem Wertebereich: 1 oder 0, bei anderen eingaben wird auch 0 gewählt und das menue wieder aufgerufen die funktion bekommt die Datenbank übergeben
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019
void menue(char Datenbank[][15]){
	//eingabe
	int ans=0;
	//eingabeaufforderung
	printf("Bitte waehlen sie\n\n");
	printf("1)Login \n2)Registrieren\n");
	scanf("%i",&ans);
	//auswahl
	switch(ans){
	case 1:Login(Datenbank);break;
	case 2:Registrieren(Datenbank);break;
	default:menue(Datenbank);break;
	}

}
// Funktionsname: ChangePw
// änderung des kennworts, dabei überprüfung der passwort richtlinien
// Eingabeparameter mit zulässigem Wertebereich: Datenbank und Zeile in der das bisherige passwort steht
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: Jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019
void ChangePw(char Datenbank[][15],int Zeile){
	//platz für altes Kennwort
	char EingabeAlt[15]={'0'};
	//platz für neues Kennwort
	char EingabeNeu[15]={'0'};
	//kennwort laenge
	int Len=0;
	//passwort policy
	int Gros=0;
	int Klein=0;
	int Ziffer=0;
	int Pruef=0;
	//Zählvariable
	int i;
	//abfrage altes Kennwort
	printf("Bitte geben ihr altes Kennwort ein\n:");
	KennwortEingeben(EingabeAlt);
	//pruefe altes kennwort
	if(strcmp(EingabeAlt,Datenbank[Zeile])==0){
		//altes kennwort ok

		//lese Kennwort ein
		do{
			printf("Bitte geben sie ihr neues Passwort ein\n:");
			KennwortEingeben(EingabeAlt);
			Len=strlen(EingabeAlt);

			//Pruefe auf korrekte eingabe
			for(i=0;i<Len;i++){
				Pruef=(int)EingabeAlt[i];

				if(Pruef>64&&Pruef<91)Gros=1;
				if (Pruef>96&&Pruef<123)Klein=1;
				if(Pruef>47&&Pruef<58)Ziffer=1;
			}


			if(Len<8||Len>14||Gros==0||Klein==0||Ziffer==0)printf("ungueltige Eingabe, beachten sie die Richtlinien zur Kennwortvergabe\n\n");

		}while((Len<8)||(Len>14)||Gros==0||Klein==0||Ziffer==0);

		//wiederhole kennwort eingabe solange bis sie übereinstimmen
		do{
			printf("Bitte geben sie ihr neues Kennwort erneut ein\n:");
			KennwortEingeben(EingabeNeu);
			//pruefe ob das alte mit dem neuen kennwort übereinstimmt
			if(strcmp(EingabeNeu,EingabeAlt)!=0)printf("Die Kennwörter stimmen nicht überein.\n");
		}while(strcmp(EingabeNeu,EingabeAlt)!=0);


		//ersetze altes mit neuem kennwort
		strcpy(Datenbank[Zeile],EingabeNeu);


		printf("Das Kennwort wurde erfolgreich geändert, aktualisiere Datenbank...");

		//aktualisiere Datenbank
		ChangeDb(Datenbank);

	}else{
		printf("Kennwort Inkorrekt\n");
	}
}

// Funktionsname: ChangeDb
// speichern der Datenbank die sich im speicher befindet auf die platte
// Eingabeparameter mit zulässigem Wertebereich: Datenbank[240][15]
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019

void ChangeDb(char Datenbank[][15]){
	//zählvariable Zeile
	int Zeile=0;
	//Zählvariable Spalte
	int Spalte=0;
	//dateibearbeitung
	//pointer auf zeichen
	FILE *fp;
	fp = fopen("db", "w");	//überschreibe / erstelle datei
	//länge der aktuellen zeile
	int Len;
	//zeilen
	for(Zeile=0;Zeile<240;Zeile++){
		//spalten
		Len=strlen(Datenbank[Zeile]);
		for(Spalte=0;Spalte<Len;Spalte++){
			//gebe zeichenweise ein
			fputc(Datenbank[Zeile][Spalte],fp);
		}
		//füge zeilenumbruch ein
		fputc(10,fp);
	}

	//schließe Datei
	fclose(fp);

	printf("Datenbank aktualisiert.\n");
}





// Funktionsname: LoadDb
// Lade Datenbank von der platte in den speicher
// Eingabeparameter mit zulässigem Wertebereich: char Datenbank[240][15]
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019

void LoadDb(char Datenbank[][15]){
	//File pointer
	FILE *fp;
	//indizierung in Datenbank
	int Spalte=0;
	int Zeile=0;
	//temporärer speicher
	char NaechstesZeichenAusDb;
	//öffne datei lesend
	fp = fopen("db", "r");

	//pruefe ob sich die datei öffnen lässt
	if(fp == NULL) {
		printf("Datenbank konnte nicht geoeffnet werden.\n");
	}else {

		//während Daten vorhanden lese aus db
		while(((NaechstesZeichenAusDb=fgetc(fp))!=EOF)){
			if(NaechstesZeichenAusDb==10){
				Datenbank[Zeile][Spalte+1]='\0';
				Zeile++;
				Spalte=0;
			}else{
				Datenbank[Zeile][Spalte]=NaechstesZeichenAusDb;
				Spalte++;
			}
		}
	}
	//schließe file
	fclose(fp);
}




// Funktionsname: main
// erstellen eines arrays zur speicherung der Datenbank, laden der Datenbank und aufrufen des menues
// Eingabeparameter mit zulässigem Wertebereich: -
// Rückgabeparameter mit zulässigem Wertebereich: -
// Autor: jan Taschbach
// Version: 1.1
// Datum der letzten Änderung: 24.1.2019

void main() {
	//erstelle platz für db
	char Datenbank[240][15]={'0'};
	//lade db in speicher
	LoadDb(Datenbank);
	//lade menue
	menue(Datenbank);

}
